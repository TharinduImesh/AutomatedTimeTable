/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package timetableis.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nisala
 */
public class ActivityManagerWindow extends javax.swing.JPanel {

    private DefaultComboBoxModel<String> listToClass = new DefaultComboBoxModel<>();
    private DefaultComboBoxModel<String> listSubjects = new DefaultComboBoxModel<>();
    private DefaultComboBoxModel<String> listTeachers = new DefaultComboBoxModel<>();
    private DefaultTableModel tableactivity;
    private ActionListener listsubactlistner;
    private int row;
    /**
     * Creates new form NewJPanel
     */
    public ActivityManagerWindow() {
        initComponents();
        updateSubjects(ListCollection.getSubjects());
//        updateClasses(App.getClasses());
        updateTeachers(ListCollection.getTeachers());
        row=0;
//        jcmbSubject.setModel(listSubjects);
//        jcmbTeacher.setModel(listTeachers);
//        jcmbToClass.setModel(listToClass);
//
//        listsubactlistner = new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent ae) {
//                               
//                String sub=(String)jcmbSubject.getSelectedItem();                        
//                listTeachers.removeAllElements();
//                
//                List<Teacher> teachers=App.getTeachers();
//                
//                for (int i = 0; i < teachers.size(); i++) {
//                    Teacher t=teachers.get(i);
//                    List<Subject> subs=t.getSubjects();
//                    for (int j = 0; j < subs.size(); j++) {
//                        if(subs.get(j).getName().equals(sub)){
//                            listTeachers.addElement(t.getName());
//                        }
//                    }
//                    
//                }
//                                  
//            }
//        };
//
//        jcmbSubject.addActionListener(listsubactlistner);
//
//        tableactivity=(DefaultTableModel)jtblTable.getModel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcmbToClass = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jcmbSubject = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblTable = new javax.swing.JTable();
        jcmbTeacher = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jspinSlots = new javax.swing.JSpinner();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnGen = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtlimit = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        jcmbToClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Semester 1", "Semester 2", "Semester 3", "Semester 4", "Semester 5", "Semester 7", "Semester 8" }));
        jcmbToClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbToClassActionPerformed(evt);
            }
        });

        jLabel1.setText("To Class");

        jLabel2.setText("Subject");

        jtblTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "To Class", "Subject", "Teacher", "# of Slots"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblTable);

        jcmbTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbTeacherActionPerformed(evt);
            }
        });

        jLabel3.setText("Teacher");

        jLabel4.setText("Number of Slots");

        jspinSlots.setValue(2);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnGen.setText("Generate Timetables");
        btnGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenActionPerformed(evt);
            }
        });

        jLabel6.setText("Color limit");

        txtlimit.setText("10");
        txtlimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtlimitActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Ubuntu", 2, 18)); // NOI18N
        jLabel5.setText("Generate TimeTable Panels");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(82, 82, 82)
                .addComponent(jcmbToClass, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102)
                .addComponent(jLabel6)
                .addGap(107, 107, 107)
                .addComponent(txtlimit, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addGap(86, 86, 86)
                .addComponent(jcmbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addGap(83, 83, 83)
                .addComponent(jcmbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addGap(46, 46, 46)
                .addComponent(jspinSlots, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(420, 420, 420)
                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnGen))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcmbToClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtlimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6))))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(jcmbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3))
                    .addComponent(jcmbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4))
                    .addComponent(jspinSlots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(btnAdd)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbTeacherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcmbTeacherActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void jcmbToClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbToClassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcmbToClassActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        String sub=(String)jcmbSubject.getSelectedItem();
        System.out.println(sub);
        Module subject=ListCollection.getSubjects().get(ListCollection.getSubjects().indexOf(sub));
        System.out.println(subject);
        
        String toc=(String)jcmbToClass.getSelectedItem();
        Semester toclass=ListCollection.getClasses().get(ListCollection.getClasses().indexOf(toc));
        System.out.println(toclass);
        
        String t=(String)jcmbTeacher.getSelectedItem();
        Lecturer teacher=ListCollection.getTeachers().get(ListCollection.getTeachers().indexOf(t));
        System.out.println(teacher);
        
        subject.setFixedClass(toclass);
        subject.setFixedTeacher(teacher);
        subject.setFixedSlots((Integer)jspinSlots.getValue());
              
        refreshActivityTable();
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenActionPerformed
        TmeTableGenerator gen=new TmeTableGenerator();
        gen.run(Integer.parseInt(txtlimit.getText().trim()));
    }//GEN-LAST:event_btnGenActionPerformed

    private void txtlimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtlimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtlimitActionPerformed

//    public void update() {
//
//        listToClass.removeAllElements();
//
//        List<StudentClass> listtoc = App.getClasses();
//        for (int i = 0; i < listtoc.size(); i++) {
//            listToClass.addElement(listtoc.get(i).getName());
//        }
//
//        jcmbSubject.removeActionListener(listsubactlistner);
//
//        listSubjects.removeAllElements();
//
//        List<Subject> listsubs = App.getSubjects();
//        for (int i = 0; i < listsubs.size(); i++) {
//            listSubjects.addElement(listsubs.get(i).getName());
//        }
//
//        jcmbSubject.addActionListener(listsubactlistner);
//
//        jcmbSubject.setSelectedIndex(0);
//        
//        refreshActivityTable();
//
//    }
    
    public void refreshActivityTable(){
        
//        int rows=tableactivity.getRowCount();
//        
//        for (int i = 0; i < rows; i++) {
//            tableactivity.removeRow(0);
//        }
//        
//        List<Subject> subjects=App.getSubjects();
//        
//        for (int i = 0; i < subjects.size(); i++) {
//            Subject s=subjects.get(i);
//            if (s.getFixedSlots()>0) {
//                tableactivity.addRow(new String[]{s.getFixedClass().getName(),s.getName(),s.getFixedTeacher().getName(),
//                    s.getFixedSlots()+""});
//            }
//        }    
        
        jtblTable.setValueAt(jcmbToClass.getSelectedItem().toString(), row, 0);
        jtblTable.setValueAt(jcmbSubject.getSelectedItem().toString(), row, 1);
        jtblTable.setValueAt(jcmbTeacher.getSelectedItem().toString(), row, 2);
        jtblTable.setValueAt(jspinSlots.getValue().toString(), row, 3);
        row++;
    }
    
    public void updateSubjects(List<Module> subjects){
        for(int i=0;i<subjects.size();i++){
            jcmbSubject.addItem(subjects.get(i).getName()+":"+subjects.get(i).getCode());
        }
    }
    public void updateClasses(List<Semester> classes){
        for(int i=0;i<classes.size();i++){
            jcmbToClass.addItem(classes.get(i).getName());
        }
    } 
    public void updateTeachers(List<Lecturer> teachers){
        for(int i=0;i<teachers.size();i++){
            jcmbTeacher.addItem(teachers.get(i).getName());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnGen;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox jcmbSubject;
    private javax.swing.JComboBox jcmbTeacher;
    private javax.swing.JComboBox jcmbToClass;
    private javax.swing.JSpinner jspinSlots;
    private javax.swing.JTable jtblTable;
    private javax.swing.JTextField txtlimit;
    // End of variables declaration//GEN-END:variables
}
